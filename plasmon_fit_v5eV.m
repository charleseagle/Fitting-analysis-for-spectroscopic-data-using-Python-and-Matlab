%=========================================================
%=========================================================
%  Program:  Plasmon_fit_v5
%  Author:   Qi Charles Sun 
%  Date:     May 18, 2013
%
%  Function: Finds plasmon peak by polynomial (13th order) and Gaussin fitting
%  Input:    Excel file generated by graph_compiler
%  Output:   1)  Plot of Abs. spectra.
%            2)  Plot of Peak Absorbance versus Time (s)
%            3)  Plot of Peak Wavelength (nm) versus Time (s)
%            4)  Plot of FWHM (nm) versus Time (s) 
%            5)  Excel file with sheet 'plasmon_peak' with Peak Abs, Wavelength versus Time (s)
%=========================================================
%=========================================================

clear all;
close all;
warning('off', 'MATLAB:polyfit:RepeatedPointsOrRescale');
warning('off', 'curvefit:fit:usingTrustRegion');
h = 4.13566733*(10^-15);    % Planck constant in eV*s
c = 299792458;              % Speed of light in m/s
hc = h*c*(10^9);            % Constant for wavelength ot energy conversion

%=========================================================
%   Input absorbance spectra from Excel file.
%=========================================================
filename = input('Input data filename (Excel format):','s');
%A = xlsread(filename,'UVvis_spec');
A = xlsread(filename);
sz = size(A);
%plot figure in wavelength (nm).
figure(9999);
hold on;
xlabel('Wavelength (nm)'); ylabel('Absorbance');
c=jet((sz(2)-1));
for (i=1:(sz(2)-1))
    H = plot(A(2:sz(1),1),A(2:sz(1),(i+1)));
    [cl] = c(i,1:3);
    set(H,'Color', cl);
end
%plot figure in energy (nm).
AeV(:,1) = hc./A(:,1);
AeV(:,2:sz(2)) = A(:,2:sz(2));
figure(99999);
hold on;
xlabel('Energy (eV)'); ylabel('Absorbance');
c=jet((sz(2)-1));
for (i=1:(sz(2)-1))
    H = plot(AeV(2:sz(1),1),AeV(2:sz(1),(i+1)));
    [cl] = c(i,1:3);
    set(H,'Color', cl);
end

Ao = A;
A(:,1) = 2.8 - AeV(:,1);

%=========================================================
%    Find indices of max, min, and baseline wavelengths.
%=========================================================
minwave = input('Input mininum wavelength for fit range:');
maxwave = input('Input maximum wavelength for fit range:');
basewave = input ('Input wavelength for baseline subtraction (for quick Gaussian fit):');
mini = 0;
maxi = 0;
basei = 0;
for (i=1:(sz(1)-1))
    if ((mini == 0) && (Ao(i+1,1) > minwave))
        mini = i;
    end
    if ((maxi == 0) && (Ao(i+1,1) > maxwave))
        maxi = i-1;
    end
    if ((basei == 0) && (Ao(i+1,1) > basewave))
        basei = i-1;
    end
end


fitcurves = 0;
for (j=1:(sz(2)-1))

%=========================================================
%   Fit background to C + Double Exp + Broad Gaussian.
%=========================================================
    clear residual;
    s = fitoptions('Method','NonLinearLeastSquares','Algorithm','Levenberg-Marquardt','MaxFunEvals',5000,'MaxIter',5000);
    f = fittype('(a+(DEamp*(1/(2*DEb))*exp(-1*abs(x-DEmu)/DEb))+((Gbamp/((2*pi()*Gbstd2)^0.5))*exp(-1*((x-Gbmu)^2)/(2*Gbstd2)))+((Gamp/((2*pi()*Gstd2)^0.5))*exp(-1*((x-Gmu)^2)/(2*Gstd2))))', 'independent','x','coefficients',{'a','DEamp','DEb','DEmu','Gbamp','Gbstd2','Gbmu','Gamp','Gstd2','Gmu'},'options',s);
    s.StartPoint = [0.1 60 0.5 -3 0.2 0.09 0.3 0.3 .005 0.6];
    s.Upper = [Inf Inf 1 1 0.4 0.15 0.49 1 .02 0.8];
    s.Lower = [0.00 10 .15 -3.5 0.03 .01 .01 .001 0 0.5];

    [fitcoeffde,fitgof] = fit(A((mini+1):(maxi+1),1),A((mini+1):(maxi+1),(j+1)),f,s);
    %fitcoeffde
     backgrde = ((fitcoeffde.DEamp*(1/(2*fitcoeffde.DEb)).*exp(-1.*abs(A((mini+1):(maxi+1),1)-fitcoeffde.DEmu)./fitcoeffde.DEb)));
     backgrg = (((fitcoeffde.Gbamp/((2*pi()*fitcoeffde.Gbstd2)^0.5)).*exp(-1*((A((mini+1):(maxi+1),1)-fitcoeffde.Gbmu).^2)./(2*fitcoeffde.Gbstd2))));
     pg = (((fitcoeffde.Gamp/((2*pi()*fitcoeffde.Gstd2)^0.5)).*exp(-1*((A((mini+1):(maxi+1),1)-fitcoeffde.Gmu).^2)./(2*fitcoeffde.Gstd2))));
    backgr = (fitcoeffde.a+(fitcoeffde.DEamp*(1/(2*fitcoeffde.DEb)).*exp(-1.*abs(A((mini+1):(maxi+1),1)-fitcoeffde.DEmu)./fitcoeffde.DEb))+((fitcoeffde.Gbamp/((2*pi()*fitcoeffde.Gbstd2)^0.5)).*exp(-1*((A((mini+1):(maxi+1),1)-fitcoeffde.Gbmu).^2)./(2*fitcoeffde.Gbstd2))));
    residual = A((mini+1):(maxi+1),(j+1))-(fitcoeffde.a+(fitcoeffde.DEamp*(1/(2*fitcoeffde.DEb)).*exp(-1.*abs(A((mini+1):(maxi+1),1)-fitcoeffde.DEmu)./fitcoeffde.DEb))+((fitcoeffde.Gbamp/((2*pi()*fitcoeffde.Gbstd2)^0.5)).*exp(-1*((A((mini+1):(maxi+1),1)-fitcoeffde.Gbmu).^2)./(2*fitcoeffde.Gbstd2))));

%=========================================================
%   Fit Abs. spectra to 13th order polynomial.
%=========================================================
    fitcoeff = polyfit(A((mini+1):(maxi+1),1),A((mini+1):(maxi+1),(j+1)),13);
    fitfunc = polyval(fitcoeff,A((mini+1):(maxi+1),1));
    [fitmax(j), fitindex(j)] = max(fitfunc);
    fitwave(j) = A((mini+fitindex(j)),1);
    fitcurves = fitcurves + 1;
 
%=========================================================
%   Polynomial fitting of residual component, over entire range.
%=========================================================
    fitcoeff2 = polyfit(A((mini+1):(maxi+1),1),residual,13);
    fitfuncr = polyval(fitcoeff2,A((mini+1):(maxi+1),1));
    residualmini = 0;
    fitmini = 0;
    fitmaxi = 0;
    if (j > 1)
        for (i=1:(sz(1)-1))
            if ((residualmini == 0) && (A(i+1,1) > (fitwaver(j-1)-0.1)))
                residualmini = i;
            end
            if ((fitmini == 0) && (A(i+1,1) > (fitwaver(j-1)-0.2)))
                fitmini = i;
            end
            if ((fitmaxi == 0) && (A(i+1,1) > (fitwaver(j-1)+0.3)))
                fitmaxi = i;
            end
        end
        residualmini = residualmini - (mini+1);
    else
        for (i=1:(sz(1)-1))
            if ((residualmini == 0) && (A(i+1,1) > (fitwave(j)-0.1)))
                residualmini = i;
            end
            if ((fitmini == 0) && (A(i+1,1) > (fitwave(j)-0.2)))
                fitmini = i+350;
            end
            if ((fitmaxi == 0) && (A(i+1,1) > (fitwave(j)+0.3)))
                fitmaxi = i+350;
            end
        end
        residualmini = residualmini - (mini+1);
    end
    if residualmini < 1
        residualmini = 1;
    end
    if fitmini < mini
        fitmini = mini;
    end
    
    [fitmaxr(j), fitindexr(j)] = max(fitfuncr(residualmini:size(fitfuncr)));
    fitwaver(j) = A((residualmini+mini+fitindexr(j)),1);
    fitmaxr(j) = polyval(fitcoeff,fitwaver(j));    

%=========================================================
%   Polynomial fitting of residual component, over limited range.
%=========================================================
    if ((fitmaxi-mini+1) < size(residual,1))
        fitcoeff3 = polyfit(A((fitmini+1):(fitmaxi+1),1),residual((fitmini-mini+1):(fitmaxi-mini+1)),6);
        fitfuncr3 = polyval(fitcoeff3,A((fitmini+1):(fitmaxi+1),1));
    else
        fitcoeff3 = polyfit(A((fitmini+1):(size(residual)+mini),1),residual((fitmini-mini+1):(size(residual))),6);
        fitfuncr3 = polyval(fitcoeff3,A((fitmini+1):(size(residual)+1),1));
    end
    [fitmaxr3(j), fitindexr3(j)] = max(fitfuncr3(20:(size(fitfuncr3)-20)));
    fitwaver3(j) = A((fitmini+fitindexr3(j)+20),1);
    fitmaxr3(j) = polyval(fitcoeff3,fitwaver3(j)) + (fitcoeffde.a+(fitcoeffde.DEamp*(1/(2*fitcoeffde.DEb))*exp(-1*abs(fitwaver3(j)-fitcoeffde.DEmu)/fitcoeffde.DEb)));

%=========================================================
%   Gaussian fitting of residual component, over limited range.
%=========================================================
    sg = fitoptions('Method','NonLinearLeastSquares','Algorithm','Levenberg-Marquardt','MaxFunEvals',5000,'MaxIter',5000);
    fg = fittype('(((Gamp/((2*pi()*Gstd2)^0.5))*exp(-1*((x-Gmu)^2)/(2*Gstd2))))', 'independent','x','coefficients',{'Gamp','Gstd2','Gmu'},'options',sg);
    sg.StartPoint = [0.2 1 fitwaver3(j)];
    sg.Upper = [Inf Inf (2.8-(hc/800))];
    sg.Lower = [0 0 (2.8-(hc/500))];
    gfitrange = 120;
    if ((fitmaxi-mini+1) < size(residual,1))
        [fitcoeffg,fitgofg] = fit(A((fitmini+fitindexr3(j)-gfitrange):(fitmini+fitindexr3(j)+gfitrange),1),residual((fitmini+fitindexr3(j)-gfitrange-mini):(fitmini+fitindexr3(j)+gfitrange-mini)),fg,sg);
        fitfuncr4 = (((fitcoeffg.Gamp/((2*pi()*fitcoeffg.Gstd2)^0.5)).*exp(-1.*((A((fitmini+fitindexr3(j)-gfitrange):(fitmini+fitindexr3(j)+gfitrange),1)-fitcoeffg.Gmu).^2)./(2.*fitcoeffg.Gstd2))));
    else
        [fitcoeffg,fitgofg] = fit(A((fitmini+fitindexr3(j)-gfitrange):(size(residual)+mini-50),1),residual((fitmini+fitindexr3(j)-gfitrange-mini):(size(residual)-50)),fg,sg);
        fitfuncr4 = (((fitcoeffg.Gamp/((2*pi()*fitcoeffg.Gstd2)^0.5)).*exp(-1.*((A((fitmini+fitindexr3(j)-gfitrange):(size(residual)+mini-50),1)-fitcoeffg.Gmu).^2)./(2.*fitcoeffg.Gstd2))));
    end
    fitmaxr4mu(j) = fitcoeffg.Gmu;
    fitmaxr4fwhm(j) = 2*((2*log(2))^0.5)*((fitcoeffg.Gstd2)^0.5);
    fitmaxr4(j) = (fitcoeffg.Gamp/((2*pi()*fitcoeffg.Gstd2)^0.5)) + (fitcoeffde.a+(fitcoeffde.DEamp*(1/(2*fitcoeffde.DEb))*exp(-1*abs(fitmaxr4mu(j)-fitcoeffde.DEmu)/fitcoeffde.DEb))+((fitcoeffde.Gbamp/((2*pi()*fitcoeffde.Gbstd2)^0.5))*exp(-1*((fitmaxr4mu(j)-fitcoeffde.Gbmu)^2)/(2*fitcoeffde.Gbstd2))));
    
%=========================================================
%   Gaussian fitting of red side of Abs spectra.
%=========================================================
    if ((fitmaxi-mini+1) < size(residual,1))
        fitfuncr4 = (((fitcoeffg.Gamp/((2*pi()*fitcoeffg.Gstd2)^0.5)).*exp(-1.*((A((mini+1):(maxi+1),1)-fitcoeffg.Gmu).^2)./(2.*fitcoeffg.Gstd2))));
    else
        fitfuncr4 = (((fitcoeffg.Gamp/((2*pi()*fitcoeffg.Gstd2)^0.5)).*exp(-1.*((A((mini+1):(size(residual)+1),1)-fitcoeffg.Gmu).^2)./(2.*fitcoeffg.Gstd2))));
    end
    fitfuncr4m = backgr+fitfuncr4;
    maxstart = 0;
    for (i=2:(sz(1)))
        if ((maxstart == 0) && (Ao(i,1) > 540))
            maxstart = i;
        end
    end
    [fitmaxr4fit(j), fitindexr4(j)] = max(fitfuncr4m((maxstart-mini):(size(fitfuncr4m)-20)));
    fitwaver4(j) = A((maxstart-mini+mini+fitindexr4(j)),1); 
    
    basea(j) = A(basei,(j+1));
    maxdiff(j) = fitmaxr4fit(j) - basea(j);
    halfmax(j) = 0.5*maxdiff(j);
    fwhma(j) = fitmaxr4fit(j) - halfmax(j);
    fwhmi = 0;
    for (i=2:(sz(1)))
        if ((fwhmi == 0) && (A(i,(j+1)) < fwhma(j)))
            fwhmi = i;
        end
    end
    fwhmwaveeV(j) = 2*abs((A(fwhmi,1)-fitwaver4(j)));
    fwhmwavenm(j) = 2*abs(((hc/A(fwhmi,1)) - (hc/fitwaver4(j))));
    
    A2(:,(j+1)) = A(:,(j+1)) - basea(j);
    A2limited = A2(((maxstart+fitindexr4(j)):basei),(j+1));
    A2limitedwave = A(((maxstart+fitindexr4(j)):basei),1);
    fg2 = fittype('(((Gamp)*exp(-1*((x-Gmu)^2)/(2*Gstd2))))', 'independent','x','coefficients',{'Gamp','Gstd2','Gmu'},'options',sg);
    sg.StartPoint = [A2limited(1) 50 A2limitedwave(1)];
    sg.Upper = [(A2limited(1)+0.01) Inf (A2limitedwave(1)+0.01)];
    sg.Lower = [(A2limited(1)-0.01) 0 (A2limitedwave(1)-0.01)];
    [fitcoeffg2,fitgofg2] = fit(A2limitedwave,A2limited,fg2,sg);
    fitfunc5 = (((fitcoeffg2.Gamp).*exp(-1.*((A2limitedwave-fitcoeffg2.Gmu).^2)./(2.*fitcoeffg2.Gstd2))));
    fitmaxgmu(j) = fitcoeffg2.Gmu;
    fitmaxgfwhm(j) = 2*((2*log(2))^0.5)*((fitcoeffg2.Gstd2)^0.5);
    fitmaxg(j) = (fitcoeffg2.Gamp) + basea(j);

%=========================================================
%   Plot of abs spectra (black), background and residual (green), polynomial fits (blue), and Gaussian fits (red).    
%=========================================================
    figure(j);
    plot(A(2:sz(1),1),A(2:sz(1),(j+1)),'-k');
    hold on;
    plot(A((mini+1):(maxi+1),1),residual,'-g');
    plot(A((mini+1):(maxi+1),1),backgr,'-g');
    if ((fitmaxi-mini+1) < size(residual,1))
        plot(A((fitmini+1):(fitmaxi+1),1),fitfuncr3,'-b');
        fitfuncr4 = (((fitcoeffg.Gamp/((2*pi()*fitcoeffg.Gstd2)^0.5)).*exp(-1.*((A((mini+1):(maxi+1),1)-fitcoeffg.Gmu).^2)./(2.*fitcoeffg.Gstd2))));
        plot(A((mini+1):(maxi+1),1),fitfuncr4,'-r');
        plot(A((mini+1):(maxi+1),1),(backgr+fitfuncr4),'-r');
    else
        plot(A((fitmini+1):(size(residual)+1),1),fitfuncr3,'-b');
        fitfuncr4 = (((fitcoeffg.Gamp/((2*pi()*fitcoeffg.Gstd2)^0.5)).*exp(-1.*((A((mini+1):(size(residual)+1),1)-fitcoeffg.Gmu).^2)./(2.*fitcoeffg.Gstd2))));
        plot(A((mini+1):(size(residual)+1),1),fitfuncr4,'-r');
        plot(A((mini+1):(size(residual)+1),1),(backgr+fitfuncr4),'-r');
    end
    plot(A2limitedwave,A2limited,'-k');
    plot(A2limitedwave,fitfunc5,'-r');
    xlim([A(2,1),A(sz(1),1)]);
    ylim([-0.1 1.0]);
end

%=========================================================
%   Plot plasmon wavelength, plasmon absorbance, and FWHM.
%=========================================================
figure(9998);
hold on;
xlabel('Time (s)'); ylabel('Peak Absorbance');
% plot((A(1,2:(fitcurves+1))/1000),fitmax,'-r');
% plot((A(1,2:(fitcurves+1))/1000),fitmaxr,'-m');
% plot((A(1,2:(fitcurves+1))/1000),fitmaxr3,'-b');
plot((A(1,2:(fitcurves+1))/1000),fitmaxr4,'-r');
plot((A(1,2:(fitcurves+1))/1000),fitmaxr4fit,'-m');
plot((A(1,2:(fitcurves+1))/1000),fitmaxg,'-b');
figure(9997);
hold on;
xlabel('Time (s)'); ylabel('Peak Energy (eV)');
% plot((A(1,2:(fitcurves+1))/1000),fitwave,'-r');
% plot((A(1,2:(fitcurves+1))/1000),fitwaver,'-m');
% plot((A(1,2:(fitcurves+1))/1000),fitwaver3,'-b');
plot((A(1,2:(fitcurves+1))/1000),(2.8 - fitmaxr4mu),'-r');
plot((A(1,2:(fitcurves+1))/1000),(2.8 - fitwaver4),'-m');
plot((A(1,2:(fitcurves+1))/1000),(2.8 - fitmaxgmu),'-b');
figure(9996);
hold on;
xlabel('Time (s)'); ylabel('FWHM (eV)');
% plot((A(1,2:(fitcurves+1))/1000),fitwave,'-r');
% plot((A(1,2:(fitcurves+1))/1000),fitwaver,'-m');
% plot((A(1,2:(fitcurves+1))/1000),fitwaver3,'-b');
plot((A(1,2:(fitcurves+1))/1000),fitmaxr4fwhm,'-r');
plot((A(1,2:(fitcurves+1))/1000),fwhmwaveeV,'-m');
plot((A(1,2:(fitcurves+1))/1000),fitmaxgfwhm,'-b');

%=========================================================
%   Output results to Excel file.
%   Column 1 = time in seconds.
%   Column 2 = Peak wavelength, polynomial fit of Abs spectra
%   Column 3 = Peak absorbance, polynomial fit of Abs spectra
%   Column 5 = Peak wavelength, polynomial fit of entire residual 
%   Column 6 = Peak absorbance, polynomial fit of entire residual 
%   Column 8 = Peak wavelength, polynomial fit of limited residual 
%   Column 9 = Peak absorbance, polynomial fit of limited residual 
%   Column 11 = Peak wavelength, Gaussian fit of residual
%   Column 12 = Peak absorbance, Gaussian fit of residual
%   Column 13 = Peak FWHM, Gaussian fit of residual
%   Column 15 = Peak wavelength, directly measured from Gaussina fit of residual + background
%   Column 16 = Peak absorbance, directly measured from Gaussina fit of residual + background
%   Column 17 = Peak FWHM, directly measured on red side of Abs spectra
%   Column 19 = Peak wavelength, Gaussian fit of red side of Abs spectra
%   Column 20 = Peak absorbance, Gaussian fit of red side of Abs spectra
%   Column 21 = Peak FWHM, Gaussian fit of red side of Abs spectra
%=========================================================
B(2:(fitcurves+1),1) = A(1,2:(fitcurves+1))/1000;
B(2:(fitcurves+1),2) = 2.8 - fitwave;
B(2:(fitcurves+1),3) = fitmax;
B(2:(fitcurves+1),5) = 2.8 - fitwaver;
B(2:(fitcurves+1),6) = fitmaxr;
B(2:(fitcurves+1),8) = 2.8 - fitwaver3;
B(2:(fitcurves+1),9) = fitmaxr3;
B(2:(fitcurves+1),11) = 2.8 - fitmaxr4mu;
B(2:(fitcurves+1),12) = fitmaxr4;
B(2:(fitcurves+1),13) = fitmaxr4fwhm;
B(2:(fitcurves+1),15) = 2.8 - fitwaver4;
B(2:(fitcurves+1),16) = fitmaxr4fit;
B(2:(fitcurves+1),17) = fwhmwaveeV;
B(2:(fitcurves+1),19) = 2.8 - fitmaxgmu;
B(2:(fitcurves+1),20) = fitmaxg;
B(2:(fitcurves+1),21) = fitmaxgfwhm;

%xlswrite(filename,B,'plasmon_peak');
xlswrite('plasmon_peak.xlsx',B);
warning('on', 'all');